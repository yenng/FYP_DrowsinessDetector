module DrowsinessDetector(
	input Clock,Rst,Start,
	input [319:0] in1 [0:29],
	output reg signed[9:0] weight,dataIn,
	output reg [319:0] outVal,
	output reg [9:0] count0,count1);
	
	// Input
	//reg [319:0] in1 [0:29];
	
	// For RAM to write/read weight. 
	reg WE;
	reg [9:0]dataOut;
	
	// The random data that generated by LFSR.
	reg signed[9:0] data;
	reg on;
	
	// The address of RAM to call the weight.
	reg [7:0] Address;
	
	// The variable that represent the state and nextState.
	reg [3:0] state;
	reg [3:0] nextState;
	
	// Parameter for the state.
	parameter 	halt = 0, weightInitiallize = 1, readWeight = 2, halt1 = 3, hiddenLayer = 4,
	           outputLayer = 5, readWeight1 = 6;
	
	// The variable for hidden layer.
	reg Clear;
	reg signed[319:0]sum;
	reg [319:0]AF_in;
	reg [9:0] AF;
	reg [9:0]out0[4:0];
	reg unsigned[319:0]inVal;
	
	always@(posedge Clock, negedge Rst) begin
		if(~Rst) begin
			state <= halt;
		end
		else begin
			state <= nextState;
		end
	end
	
	always@(Start, state,data,sum,dataOut) begin
		case(state)
		  // The following state is for weightInitiallize module.
			halt: begin
				on = 0;				// Off LFSR
				Clear = 1;			// Clear the data of sum in hiddenlayer_top
				count1 = 0;
				count0 = 0;
				if(Start)
					nextState = readWeight;
				else
					nextState = weightInitiallize;
			end
			weightInitiallize: begin
				WE = 1;				// Write in random data
				on = 1;				// Start LFSR
				dataIn = data;
				Address = count0;
				if (count0 == 10'd165) begin
					nextState = halt;
					count0 = 0;
				end
				else
				  count0++;
			end
			// For reading weight in test bench.
			readWeight: begin
				WE = 0;
				Clear = 0;
				Address = count0+count1*10'd30;
				weight = dataOut;
				nextState = hiddenLayer;
				inVal = in1[count0];
			end
			halt1: begin
				on = 0;
				Clear = 1;
				nextState = readWeight1;
			end
			// The states above used to initiallize the weight.
			// ****************************************************************//
			// Hidden Layer for sum calculation
			hiddenLayer: begin // Calculate the output value of hiddenLayer
				outVal = sum;
				AF_in = sum;
				out0[count1] = AF;
				if (count1 == 4) begin
				  nextState = halt1;
				end
				else begin
				  if (count0 == 29) begin
				    count1++;
				    count0 = 0;
				    Clear = 1;
				  end
				  else begin
				    count0++;
				    nextState = readWeight;
				  end
				end
			end
			outputLayer: begin
				Clear = 0;
				WE = 0;
				weight = dataOut;
				
			end
			readWeight1: begin
				WE = 0;
				Address = count0 + 8'd150 + count1*8'd5;
				nextState = outputLayer;
			end
		endcase
	end
	
	// For hidden layer calculation.
	HiddenLayer_top getMul(Clock, Clear, weight, inVal, sum);
	ActivationFunc actFun(AF_in, AF);
	
	// For weight initiallize.
	LFSR rndnm(Clock, Rst, on, data);
	WeightRAM ram(Clock, Rst, dataIn, Address, WE, dataOut);
	
	
endmodule 