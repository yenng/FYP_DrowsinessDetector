module DrowsinessDetector(
	input Clock,Rst,Start,
	output signed[9:0] dataRead,
	output reg signed[9:0] dataIn);
	
	// For counter.
	reg [9:0]count;		// The number that count in counter.
	reg startCounter;		// To start the counter.
	wire stopCounter;		// To stop the counter.
	
	// For RAM to write/read weight.
	reg WE;
	
	// The random data that generated by LFSR
	reg signed[9:0] data;
	reg on;
	
	// The address of RAM to call the weight.
	reg [6:0] Address;
	
	// The variable that represent the state and nextState.
	reg [3:0] state;
	reg [3:0] nextState;
	
	// Parameter for the state.
	parameter 	halt = 0,weightInitiallize = 1, readWeight = 2, halt1 = 3,
					hiddenLayer_top = 4;
	
	always@(posedge Clock, negedge Rst) begin
		if(~Rst) begin
			state <= halt;
		end
		else begin
			state <= nextState;
		end
	end
	
	always@(*) begin
		case(state)
		  // The following state is for weightInitiallize module.
			halt: begin
				startCounter = 0;	// Off counter
				on = 0;				// Off LFSR
				if(Start) 
					nextState = hiddenLayer;
				else
					nextState = weightInitiallize;
			end
			weightInitiallize: begin
				WE = 1;				// Start counter
				on = 1;				// Start LFSR
				dataIn = data;
				startCounter = 1;
				if (stopCounter) begin
					nextState = halt;
				end
			end
			// For reading weight in test bench.
			readWeight: begin
				WE = 0;
				startCounter = 1;
			end
			halt1: begin
				startCounter = 0;
				on = 0;
				nextState = readWeight;
			end
			// The states above used to initiallize the weight.
			// ****************************************************************//
			// Hidden Layer
			hiddenLayer_top: begin
				
			end
		endcase
	end
	
	HiddenLayer_top getMul(Clock,Clear,weight,inVal,outVal);
	LFSR rndnm(Clock, Rst, on, data);
	counter count65(Clock, startCounter, 10'd65,stopCounter,count);
	WeightRAM ram(Clock, Rst, dataIn,count, WE, dataRead);
	
	
endmodule 