--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Stratix II" DSP_BLOCK_BALANCING="Logic ELements" INPUT_A_FIXED_VALUE="Bx" INPUT_A_IS_CONSTANT="NO" INPUT_B_FIXED_VALUE="Bx" INPUT_B_IS_CONSTANT="NO" LPM_PIPELINE=0 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=10 LPM_WIDTHB=10 LPM_WIDTHP=20 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 10.0 cbx_cycloneii 2010:06:27:21:21:57:SJ cbx_lpm_add_sub 2010:06:27:21:21:57:SJ cbx_lpm_mult 2010:06:27:21:21:57:SJ cbx_mgl 2010:06:27:21:25:48:SJ cbx_padd 2010:06:27:21:21:57:SJ cbx_stratix 2010:06:27:21:21:57:SJ cbx_stratixii 2010:06:27:21:21:57:SJ cbx_util_mgl 2010:06:27:21:21:57:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 115 
SUBDESIGN mult_9p71
( 
	dataa[9..0]	:	input;
	datab[9..0]	:	input;
	result[19..0]	:	output;
) 
VARIABLE
	add2_result[18..0]	:	WIRE;
	add7_result[10..0]	:	WIRE;
	sum_adder1aa_0_dataa[10..0]	:	WIRE;
	sum_adder1aa_0_datab[10..0]	:	WIRE;
	sum_adder1aa_0_result[10..0]	:	WIRE;
	sum_adder1aa_1_dataa[10..0]	:	WIRE;
	sum_adder1aa_1_datab[10..0]	:	WIRE;
	sum_adder1aa_1_result[10..0]	:	WIRE;
	sum_adder1aa_2_dataa[10..0]	:	WIRE;
	sum_adder1aa_2_datab[10..0]	:	WIRE;
	sum_adder1aa_2_result[10..0]	:	WIRE;
	sum_adder1aa_3_dataa[10..0]	:	WIRE;
	sum_adder1aa_3_datab[10..0]	:	WIRE;
	sum_adder1aa_3_result[10..0]	:	WIRE;
	sum_adder1aa_4_dataa[10..0]	:	WIRE;
	sum_adder1aa_4_datab[10..0]	:	WIRE;
	sum_adder1aa_4_result[10..0]	:	WIRE;
	sft10a[10..0] : soft;
	sft11a[10..0] : soft;
	sft3a[18..0] : soft;
	sft4a[18..0] : soft;
	sft5a[18..0] : soft;
	sft6a[18..0] : soft;
	sft8a[10..0] : soft;
	sft9a[10..0] : soft;
	dataa_node[9..0]	: WIRE;
	datab_node[9..0]	: WIRE;
	final_result_node[19..0]	: WIRE;
	w214w	: WIRE;
	w335w[20..0]	: WIRE;
	w_decoder_node9w[99..0]	: WIRE;
	w_le_datab_node8w[9..0]	: WIRE;
	w_sum_node10w[59..0]	: WIRE;

BEGIN 
	add2_result[] = sft3a[].out + sft4a[].out + sft5a[].out;
	add7_result[] = sft8a[].out + sft9a[].out + sft10a[].out;
	sum_adder1aa_0_result[] = sum_adder1aa_0_dataa[] + sum_adder1aa_0_datab[];
	sum_adder1aa_0_dataa[] = ( B"0", w_decoder_node9w[19..10]);
	sum_adder1aa_0_datab[] = ( B"0", B"0", w_decoder_node9w[9..1]);
	sum_adder1aa_1_result[] = sum_adder1aa_1_dataa[] + sum_adder1aa_1_datab[];
	sum_adder1aa_1_dataa[] = ( B"0", w_decoder_node9w[39..30]);
	sum_adder1aa_1_datab[] = ( B"0", B"0", w_decoder_node9w[29..21]);
	sum_adder1aa_2_result[] = sum_adder1aa_2_dataa[] + sum_adder1aa_2_datab[];
	sum_adder1aa_2_dataa[] = ( B"0", w_decoder_node9w[59..50]);
	sum_adder1aa_2_datab[] = ( B"0", B"0", w_decoder_node9w[49..41]);
	sum_adder1aa_3_result[] = sum_adder1aa_3_dataa[] + sum_adder1aa_3_datab[];
	sum_adder1aa_3_dataa[] = ( B"0", w_decoder_node9w[79..70]);
	sum_adder1aa_3_datab[] = ( B"0", B"0", w_decoder_node9w[69..61]);
	sum_adder1aa_4_result[] = sum_adder1aa_4_dataa[] + sum_adder1aa_4_datab[];
	sum_adder1aa_4_dataa[] = ( B"0", w_decoder_node9w[99..90]);
	sum_adder1aa_4_datab[] = ( B"0", B"0", w_decoder_node9w[89..81]);
	sft10a[].in = ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w_sum_node10w[51..51], ( w_sum_node10w[50..50], ( w_sum_node10w[49..49], ( w_sum_node10w[48..48], ( w214w, w214w))))))))));
	sft11a[].in = add7_result[];
	sft3a[].in = ( w214w, ( w_sum_node10w[59..59], ( w_sum_node10w[58..58], ( w_sum_node10w[47..47], ( w_sum_node10w[46..46], ( w_sum_node10w[55..55], ( w_sum_node10w[54..54], ( w_sum_node10w[23..23], ( w_sum_node10w[22..22], ( w_sum_node10w[11..11], ( w_sum_node10w[10..10], ( w_sum_node10w[9..9], ( w_sum_node10w[8..8], ( w_sum_node10w[7..7], ( w_sum_node10w[6..6], ( w_sum_node10w[5..5], ( w_sum_node10w[4..4], ( w_sum_node10w[3..2]))))))))))))))))));
	sft4a[].in = ( w214w, ( w214w, ( w214w, ( w_sum_node10w[57..57], ( w_sum_node10w[56..56], ( w_sum_node10w[45..45], ( w_sum_node10w[44..44], ( w_sum_node10w[33..33], ( w_sum_node10w[32..32], ( w_sum_node10w[21..21], ( w_sum_node10w[20..20], ( w_sum_node10w[19..19], ( w_sum_node10w[18..18], ( w_sum_node10w[17..17], ( w_sum_node10w[16..16], ( w_sum_node10w[15..15], ( w_sum_node10w[14..14], ( w_sum_node10w[13..12]))))))))))))))))));
	sft5a[].in = ( w214w, ( w214w, ( w214w, ( w214w, ( sft11a[10..10].out, ( sft11a[9..9].out, ( sft11a[8..8].out, ( sft11a[7..7].out, ( sft11a[6..6].out, ( sft11a[5..5].out, ( sft11a[4..4].out, ( sft11a[3..3].out, ( sft11a[2..2].out, ( sft11a[1..1].out, ( sft11a[0..0].out, ( w_sum_node10w[25..25], ( w_sum_node10w[24..24], ( w214w, w214w))))))))))))))))));
	sft6a[].in = add2_result[];
	sft8a[].in = ( w214w, ( w_sum_node10w[35..35], ( w_sum_node10w[34..34], ( w_sum_node10w[53..53], ( w_sum_node10w[52..52], ( w_sum_node10w[41..41], ( w_sum_node10w[40..40], ( w_sum_node10w[39..39], ( w_sum_node10w[38..38], ( w_sum_node10w[37..36]))))))))));
	sft9a[].in = ( w214w, ( w214w, ( w214w, ( w_sum_node10w[43..43], ( w_sum_node10w[42..42], ( w_sum_node10w[31..31], ( w_sum_node10w[30..30], ( w_sum_node10w[29..29], ( w_sum_node10w[28..28], ( w_sum_node10w[27..26]))))))))));
	dataa_node[] = ( dataa[9..0]);
	datab_node[] = ( datab[9..0]);
	final_result_node[] = ( w335w[19..0]);
	result[] = ( final_result_node[19..0]);
	w214w = B"0";
	w335w[] = ( sft6a[18..17].out, sft6a[16..15].out, sft6a[14..13].out, sft6a[12..11].out, sft6a[10..9].out, sft6a[8..7].out, sft6a[6..5].out, sft6a[4..3].out, sft6a[2..1].out, sft6a[0..0].out, w_sum_node10w[1..1], w_sum_node10w[0..0]);
	w_decoder_node9w[] = ( (( dataa_node[9..0]) & w_le_datab_node8w[9..9]), (( dataa_node[9..0]) & w_le_datab_node8w[8..8]), (( dataa_node[9..0]) & w_le_datab_node8w[7..7]), (( dataa_node[9..0]) & w_le_datab_node8w[6..6]), (( dataa_node[9..0]) & w_le_datab_node8w[5..5]), (( dataa_node[9..0]) & w_le_datab_node8w[4..4]), (( dataa_node[9..0]) & w_le_datab_node8w[3..3]), (( dataa_node[9..0]) & w_le_datab_node8w[2..2]), (( dataa_node[9..0]) & w_le_datab_node8w[1..1]), (( dataa_node[9..0]) & w_le_datab_node8w[0..0]));
	w_le_datab_node8w[] = ( datab_node[9..0]);
	w_sum_node10w[] = ( sum_adder1aa_4_result[], w_decoder_node9w[80..80], sum_adder1aa_3_result[], w_decoder_node9w[60..60], sum_adder1aa_2_result[], w_decoder_node9w[40..40], sum_adder1aa_1_result[], w_decoder_node9w[20..20], sum_adder1aa_0_result[], w_decoder_node9w[0..0]);
END;
--VALID FILE
